/**
 * @fileoverview Servicio para b√∫squeda geogr√°fica de proveedores
 * @description Maneja las peticiones a la API de geo-b√∫squeda
 */

import type { Provider } from './providerService';

/**
 * Interfaz para los par√°metros de b√∫squeda geogr√°fica
 */
export interface GeoSearchParams {
  /** Longitud */
  long: number;
  /** Latitud */
  lat: number;
  /** Radio de b√∫squeda en kil√≥metros */
  range_km: number;
  /** Array de IDs de subcategor√≠as (opcional) */
  subcategories_id?: number[];
  /** A√±os m√≠nimos de experiencia (opcional) */
  experience_years?: number;
}

/**
 * Interfaz para la respuesta de la API
 */
export interface GeoSearchResponse {
  success: boolean;
  data: Provider[];
  message?: string;
}

class GeoSearchService {
  private baseUrl: string;

  constructor() {
    this.baseUrl = import.meta.env.VITE_API_BASE_URL || 'http://localhost:8000/api';
  }

  /**
   * Realiza b√∫squeda geogr√°fica de proveedores
   */
  async searchProviders(params: GeoSearchParams): Promise<GeoSearchResponse> {
    try {
      console.log('üîç Buscando proveedores geo:', params);

      const response = await fetch(`${this.baseUrl}/providers/geo-search`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: JSON.stringify(params),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();

      return {
        success: true,
        data: data || [],
        message: 'B√∫squeda completada exitosamente'
      };

    } catch (error: any) {
      console.error('‚ùå Error en b√∫squeda geogr√°fica:', error);
      
      return {
        success: false,
        data: [],
        message: error.message || 'Error en la b√∫squeda de proveedores'
      };
    }
  }

  /**
   * Obtiene el radio de b√∫squeda guardado en preferences
   */
  async getSavedSearchRadius(): Promise<number> {
    try {
      const { preferencesService } = await import('./preferencesService');
      const savedRadius = await preferencesService.get('search_radius');
      return savedRadius ? parseInt(savedRadius) : 10; // Default 10km
    } catch (error) {
      console.warn('‚ö†Ô∏è Error obteniendo radio guardado, usando default:', error);
      return 10;
    }
  }

  /**
   * Guarda el radio de b√∫squeda en preferences
   */
  async saveSearchRadius(radius: number): Promise<void> {
    try {
      const { preferencesService } = await import('./preferencesService');
      await preferencesService.set('search_radius', radius.toString());
      console.log('‚úÖ Radio de b√∫squeda guardado:', radius);
    } catch (error) {
      console.error('‚ùå Error guardando radio de b√∫squeda:', error);
    }
  }
}

export const geoSearchService = new GeoSearchService();
export { GeoSearchService };
